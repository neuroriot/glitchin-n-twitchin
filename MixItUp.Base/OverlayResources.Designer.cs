//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MixItUp.Base {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class OverlayResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OverlayResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MixItUp.Base.OverlayResources", typeof(OverlayResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @charset &quot;UTF-8&quot;;/*!
        /// * animate.css - https://animate.style/
        /// * Version - 4.1.1
        /// * Licensed under the MIT license - http://opensource.org/licenses/MIT
        /// *
        /// * Copyright (c) 2020 Animate.css
        /// * Changed default duration to 750ms - Neurioriot Bot
        /// */:root{--animate-duration:750ms;--animate-delay:750ms;--animate-repeat:1}.animate__animated{-webkit-animation-duration:750ms;animation-duration:750ms;-webkit-animation-duration:var(--animate-duration);animation-duration:var(--animate-duration);-webkit-animation [rest of string was truncated]&quot;;.
        /// </summary>
        public static string animateCSS {
            get {
                return ResourceManager.GetString("animateCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @charset &quot;UTF-8&quot;;/*!
        /// * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
        /// * Copyright 2011-2022 The Bootstrap Authors
        /// * Copyright 2011-2022 Twitter, Inc.
        /// * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
        /// */:root{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-black:#000;--bs-white:#fff;--bs-gray:#6c757d;--bs-gray-dark:#343a40;--bs [rest of string was truncated]&quot;;.
        /// </summary>
        public static string bootstrapCSS {
            get {
                return ResourceManager.GetString("bootstrapCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        ///  * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
        ///  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
        ///  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
        ///  */
        ///!function(t,e){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=e(require(&quot;@popperjs/core&quot;)):&quot;function&quot;==typeof define&amp;&amp;define.amd?define([&quot;@popperjs/core&quot;],e):(t=&quot;undefined&quot;!=typeof globalThis?globalThis:t||self).bootstrap=e(t.Popper)}(this,(fu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string bootstrapJS {
            get {
                return ResourceManager.GetString("bootstrapJS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */
        ///!function(e,t){&quot;use strict&quot;;&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return t(e)}:t(e)}(&quot;undefined&quot;!=typeof window?window:this,function(C,e){&quot;use strict&quot;;var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string jqueryJS {
            get {
                return ResourceManager.GetString("jqueryJS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const main = document.getElementById(&quot;maindiv&quot;);
        ///
        ///const duration = {Duration} * 1000;
        ///
        ///function removeSelf()
        ///{
        ///    main.style.visibility=&apos;hidden&apos;;
        ///    sendParentMessage({ Type: &quot;Remove&quot;, ID: &quot;{ID}&quot; });
        ///}
        ///
        ///performAnimation(&quot;{EntranceAnimationFramework}&quot;, &quot;{EntranceAnimationName}&quot;, main).then((result) =&gt;
        ///{
        ///    if (duration &gt; 0.0)
        ///    {
        ///        setTimeout(() =&gt;
        ///        {
        ///            performAnimation(&quot;{ExitAnimationFramework}&quot;, &quot;{ExitAnimationName}&quot;, main).then((result) =&gt;
        ///            {
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayActionDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayActionDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///    width: {Width};
        ///    height: {Height};
        ///    background-color: {BackgroundColor};
        ///    border-style: solid;
        ///    border-width: 5px;
        ///    border-color: {BorderColor};
        ///
        ///    overflow: hidden;
        ///
        ///    display: flex;
        ///    flex-direction: column;
        ///    align-items: flex-start;
        ///    justify-content: {FlexAlignment};
        ///}
        ///
        ///.item {
        ///    margin: 5px;
        ///}
        ///
        ///.message {
        ///    font-size: {FontSize}px;
        ///    color: {FontColor};
        ///    font-family: &apos;{FontFamily}&apos;;
        ///    font-weight: {FontWeight};
        ///    text-decoratio [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayChatDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayChatDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;message&quot;&gt;
        ///    &lt;div class=&quot;item&quot;&gt;
        ///        &lt;span class=&quot;message&quot;&gt;&lt;/span&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;avatar&quot;&gt;
        ///    &lt;img class=&quot;image&quot; /&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;badge&quot;&gt;
        ///    &lt;img class=&quot;image&quot; /&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;username&quot;&gt;
        ///    &lt;span&gt;&lt;/span&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;text&quot;&gt;
        ///    &lt;span&gt;&lt;/span&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;emote&quot;&gt;
        ///    &lt;img class=&quot;image&quot; /&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayChatDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayChatDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const messageTemplate = document.querySelector(&quot;#message&quot;);
        ///const avatarTemplate = document.querySelector(&quot;#avatar&quot;);
        ///const badgeTemplate = document.querySelector(&quot;#badge&quot;);
        ///const usernameTemplate = document.querySelector(&quot;#username&quot;);
        ///const textTemplate = document.querySelector(&quot;#text&quot;);
        ///const emoteTemplate = document.querySelector(&quot;#emote&quot;);
        ///
        ///const list = document.getElementById(&quot;list&quot;);
        ///
        ///const maxMessages = 100;
        ///var pendingMessage = [];
        ///
        ///const messageDelayTime = {MessageDelayTime};
        ///const mes [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayChatDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayChatDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const main = document.getElementById(&quot;maindiv&quot;);
        ///
        ///const emojiPrefix = &quot;emoji://&quot;;
        ///
        ///const maxWidth = window.screen.width;
        ///const maxHeight = window.screen.height;
        ///
        ///const duration = {Duration} * 1000;
        ///
        ///const emoteWidth = {EmoteWidth};
        ///const emoteHeight = {EmoteHeight};
        ///
        ///const perEmoteShown = {PerEmoteShown};
        ///
        ///function sleep(ms)
        ///{
        ///    return new Promise(resolve =&gt; setTimeout(resolve, ms));
        ///}
        ///
        ///function randomNumber(min, max)
        ///{
        ///    return Math.floor(Math.random() * (max - min)) + min;
        ///}
        ///
        ///f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEmoteEffectBaseDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayEmoteEffectBaseDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .maindiv
        ///{
        ///    position: absolute;
        ///    width: 100%;
        ///    max-width: 100%;
        ///    min-width: 100%;
        ///    height: 100%;
        ///    max-height: 100%;
        ///    min-height: 100%;
        ///    margin: 0px;
        ///    z-index: {Layer};
        ///}
        ///
        ///.emote
        ///{
        ///    visibility: hidden;
        ///}
        ///
        ///@keyframes rain-keyframes
        ///{
        ///    0% { transform: translateY(-20vh); visibility: visible; }
        ///    100% { transform: translateY(120vh); }
        ///}
        ///
        ///.rain
        ///{
        ///    animation: rain-keyframes {Duration}s linear;
        ///}
        ///
        ///@keyframes float-keyframes
        ///{
        ///    0% { transform: t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEmoteEffectDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayEmoteEffectDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;maindiv&quot; class=&quot;maindiv&quot;&gt;
        ///
        ///&lt;/div&gt;.
        /// </summary>
        public static string OverlayEmoteEffectDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayEmoteEffectDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const animation = &quot;{AnimationType}&quot;;
        ///
        ///async function addEmotes(emotes)
        ///{
        ///    let totalEmotes = 0;
        ///    for (let e = 0; e &lt; emotes.length; e++)
        ///    {
        ///        for (let i = 0; i &lt; perEmoteShown &amp;&amp; totalEmotes &lt; {MaxAmountShown}; i++)
        ///        {
        ///            totalEmotes++;
        ///
        ///            var emote = createEmote(emotes[e]);
        ///
        ///            window[animation](emote);
        ///            
        ///            if ({IncludeDelay})
        ///            {
        ///                await sleep(200);
        ///            }
        ///        }
        ///    }
        ///    
        ///    set [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEmoteEffectDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayEmoteEffectDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///    position: absolute;
        ///    margin: 0;
        ///    padding: 0;
        ///    display: flex;
        ///    align-items: center;
        ///    width: 100vw;
        ///    flex-direction: column;
        ///}
        ///
        ///.section {
        ///    display: contents;
        ///}
        ///
        ///.header {
        ///    padding-bottom: 20px;
        ///    font-size: {HeaderFontSize}px;
        ///    color: {HeaderFontColor};
        ///    font-family: &apos;{HeaderFontFamily}&apos;;
        ///    font-weight: {HeaderFontWeight};
        ///    text-decoration: {HeaderTextDecoration};
        ///    font-style: {HeaderFontStyle};
        ///    text-align: {HeaderTextAlignment};
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEndCreditsDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayEndCreditsDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot; style=&quot;top: 100vh&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;spacer&quot;&gt;
        ///    &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt;
        ///&lt;/template&gt;
        ///
        ///{Sections}.
        /// </summary>
        public static string OverlayEndCreditsDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayEndCreditsDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const animationKeyframes =
        ///[
        ///    { transform: &quot;translateY(0vh)&quot;, offset: 0 },
        ///    { transform: &quot;translateY(-100%) translateY(-100vh)&quot;, offset: 1 },
        ///];
        ///
        ///const scrollRate = {ScrollRate};
        ///const animationIterations = {AnimationIterations};
        ///const fadeTime = 3000;
        ///
        ///const main = document.getElementById(&quot;maindiv&quot;);
        ///const list = document.getElementById(&quot;list&quot;);
        ///
        ///const spacerTemplate = document.querySelector(&quot;#spacer&quot;);
        ///
        ///var running = false;
        ///
        ///function startCredits(data)
        ///{
        ///    if (running)
        ///    {
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEndCreditsDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayEndCreditsDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;template id=&quot;section-{SectionID}&quot;&gt;
        ///    &lt;div&gt;
        ///        &lt;div class=&quot;header&quot;&gt;{Name}&lt;/div&gt;
        ///        &lt;div class=&quot;columns columns-{SectionID}&quot;&gt;&lt;/div&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;column-{SectionID}&quot;&gt;
        ///    &lt;div style=&quot;width: {ColumnWidthPercentage}vw;&quot;&gt;&lt;/div&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;item-{SectionID}&quot;&gt;
        ///    &lt;div class=&quot;text&quot;&gt;&lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayEndCreditsSectionDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayEndCreditsSectionDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///}
        ///
        ///.item {
        ///    width: {Width};
        ///    height: {Height};
        ///    background-color: {BackgroundColor};
        ///    border-style: solid;
        ///    border-width: 5px;
        ///    border-color: {BorderColor};
        ///    overflow: hidden;
        ///}
        ///
        ///.itemContents {
        ///    display: flex;
        ///    flex-direction: column;
        ///    height: 100%;
        ///    justify-content: space-between;
        ///}
        ///
        ///.topLeft {
        ///    margin-top: 10px;
        ///    margin-left: 10px;
        ///}
        ///
        ///.bottomRight {
        ///    align-self: end;
        ///    margin-bottom: 10px;
        ///    margin-right: 10px;
        ///}
        ///
        ///.heade [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEventListDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayEventListDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;item&quot;&gt;
        ///    &lt;div class=&quot;item&quot;&gt;
        ///        &lt;div class=&quot;itemContents&quot;&gt;
        ///            &lt;span class=&quot;header topLeft&quot;&gt;&lt;/span&gt;
        ///            &lt;span class=&quot;text bottomRight&quot;&gt;&lt;/span&gt;
        ///        &lt;/div&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayEventListDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayEventListDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const list = document.getElementById(&quot;list&quot;);
        ///
        ///const itemTemplate = document.querySelector(&quot;#item&quot;);
        ///
        ///const maxItems = {TotalToShow};
        ///const addToTop = {AddToTop};
        ///
        ///function clear(data)
        ///{
        ///    while (list.childElementCount &gt; 0)
        ///    {
        ///        list.removeChild(list.lastElementChild);
        ///    }
        ///}
        ///
        ///function add(data)
        ///{
        ///    let item = createItem(data);
        ///    if (list.children.length &gt;= maxItems)
        ///    {
        ///        if (addToTop)
        ///        {
        ///            removeAndAddItem(list.lastElementChild, item);
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEventListDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayEventListDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///}
        ///
        ///.item {
        ///    width: {Width};
        ///    height: {Height};
        ///    background-color: {BackgroundColor};
        ///    border-style: solid;
        ///    border-width: 5px;
        ///    border-color: {BorderColor};
        ///    overflow: hidden;
        ///}
        ///
        ///.itemContents {
        ///    display: inline-flex;
        ///    justify-content: flex-start;
        ///    align-items: center;
        ///    margin-left: 10px;
        ///    margin-right: 10px;
        ///}
        ///
        ///.avatar {
        ///    width: max-content;
        ///    height: {FontSize}px;
        ///    margin-right: 10px;
        ///}
        ///
        ///.centeredText {
        ///    line-height: {Heigh [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGameQueueDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayGameQueueDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;item&quot;&gt;
        ///    &lt;div class=&quot;item&quot;&gt;
        ///        &lt;div class=&quot;itemContents&quot;&gt;
        ///            &lt;img class=&quot;avatar&quot; /&gt;
        ///            &lt;span class=&quot;centeredText text&quot;&gt;&lt;/span&gt;
        ///        &lt;/div&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayGameQueueDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayGameQueueDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const list = document.getElementById(&quot;list&quot;);
        ///
        ///const itemTemplate = document.querySelector(&quot;#item&quot;);
        ///
        ///var items = [];
        ///
        ///function clear(data)
        ///{
        ///    items = [];
        ///    while (list.childElementCount &gt; 0)
        ///    {
        ///        list.removeChild(list.lastElementChild);
        ///    }
        ///}
        ///
        ///function update(data)
        ///{
        ///    for (let i = 0; i &lt; items.length &amp;&amp; i &lt; data.Items.length; i++)
        ///    {
        ///        if (items[i] !== data.Items[i].User.ID)
        ///        {
        ///            let oldItem = list.children[i];
        ///            let newItem = cre [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGameQueueDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayGameQueueDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .maindiv {
        ///    position: absolute;
        ///    width: 100%;
        ///    max-width: 100%;
        ///    min-width: 100%;
        ///    height: 100%;
        ///    max-height: 100%;
        ///    min-height: 100%;
        ///    margin: 0px;
        ///    z-index: {Layer};
        ///}
        ///
        ///.contentdiv {
        ///    position: absolute;
        ///    margin: 0px;
        ///    left: {XPosition}{PositionTypeUnit};
        ///    top: {YPosition}{PositionTypeUnit};
        ///    transform: translate({XTranslation}%, {YTranslation}%);
        ///    width: {Width};
        ///    height: {Height};
        ///}
        ///
        ///.text {
        ///    font-size: {FontSize}px;
        ///    color: { [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGoalDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayGoalDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div class=&quot;mainContainer&quot;&gt;
        ///  &lt;div class=&quot;goalName&quot;&gt;
        ///    &lt;span id=&quot;goalName&quot; class=&quot;text&quot;&gt;&lt;/span&gt;
        ///  &lt;/div&gt;
        ///  
        ///  &lt;div class=&quot;goalContainer&quot;&gt;
        ///    &lt;div class=&quot;goalBar&quot;&gt;
        ///      &lt;div id=&quot;goalBarCompleted&quot; class=&quot;goalBarCompleted&quot; /&gt;
        ///    &lt;/div&gt;
        ///
        ///    &lt;div class=&quot;goalBarText&quot;&gt;
        ///      &lt;span class=&quot;text&quot;&gt;
        ///        &lt;span id=&quot;goalAmount&quot;&gt;&lt;/span&gt;
        ///        &lt;span&gt; / &lt;/span&gt;
        ///        &lt;span id=&quot;goalMaxAmount&quot;&gt;&lt;/span&gt;
        ///      &lt;/span&gt;
        ///    &lt;/div&gt;
        ///  &lt;/div&gt;
        ///  
        ///  &lt;div class=&quot;goalEnd&quot;&gt;
        ///    &lt;span id=&quot;goalEnd&quot; class=&quot;te [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGoalDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayGoalDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const main = document.getElementById(&quot;maindiv&quot;);
        ///
        ///const goalName = document.getElementById(&quot;goalName&quot;);
        ///const goalEnd = document.getElementById(&quot;goalEnd&quot;);
        ///const goalBarCompleted = document.getElementById(&quot;goalBarCompleted&quot;);
        ///const goalAmount = document.getElementById(&quot;goalAmount&quot;);
        ///const goalMaxAmount = document.getElementById(&quot;goalMaxAmount&quot;);
        ///
        ///function update(data)
        ///{
        ///    goalAmount.innerHTML = data.GoalAmount;
        ///    adjustProgress(data);
        ///    performAnimation(&quot;{ProgressOccurredAnimationFramework [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGoalDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayGoalDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function update(data)
        ///{
        ///
        ///}
        ///
        ///sendParentMessage({ Type: &quot;WidgetLoaded&quot;, ID: &quot;{ID}&quot; });.
        /// </summary>
        public static string OverlayHTMLWidgetDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayHTMLWidgetDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .image {
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayImageDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayImageDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;img id=&quot;image&quot; class=&quot;image&quot; src=&quot;{URLPath}&quot; /&gt;.
        /// </summary>
        public static string OverlayImageDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayImageDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const image = document.getElementById(&quot;image&quot;);
        ///
        ///var lastFilePathID = &quot;{FilePathID}&quot;;
        ///
        ///function update(data)
        ///{
        ///    if (lastFilePathID !== data.FilePathID)
        ///    {
        ///        lastFilePathID = data.FilePathID;
        ///        
        ///        image.src = data.URLPath;
        ///    }
        ///}
        ///
        ///sendParentMessage({ Type: &quot;WidgetLoaded&quot;, ID: &quot;{ID}&quot; });.
        /// </summary>
        public static string OverlayImageWidgetDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayImageWidgetDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to maindiv.style.visibility=&apos;hidden&apos;;
        ///sendParentMessage({ Type: &quot;Remove&quot;, ID: &quot;{ID}&quot; });.
        /// </summary>
        public static string OverlayItemHideAndSendParentMessageRemoveJavascript {
            get {
                return ResourceManager.GetString("OverlayItemHideAndSendParentMessageRemoveJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;Neuroriot Bot - Overlay&lt;/title&gt;
        ///
        ///    &lt;script src=&quot;/scripts/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;
        ///
        ///    &lt;script src=&quot;/scripts/video.min.js&quot;&gt;&lt;/script&gt;
        ///
        ///    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/scripts/animate.min.css&quot;&gt;
        ///
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///        {CSS}
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body style=&quot;background-color: transparent; overflow: hidden; position: absolute; width: 100%; max-width: 100%; min-width: [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayItemIFrameHTML {
            get {
                return ResourceManager.GetString("OverlayItemIFrameHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to addLabelDisplay(&quot;{Type}&quot;, &quot;{Format}&quot;);.
        /// </summary>
        public static string OverlayLabelAddJavascript {
            get {
                return ResourceManager.GetString("OverlayLabelAddJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $labelamount.
        /// </summary>
        public static string OverlayLabelAmountDefaultFormat {
            get {
                return ResourceManager.GetString("OverlayLabelAmountDefaultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .labelDisplay
        ///{
        ///    position: absolute;
        ///    transform: translate({XTranslation}%, {YTranslation}%);
        ///    width: {Width};
        ///}.
        /// </summary>
        public static string OverlayLabelDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayLabelDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;labels&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;labeldisplay&quot;&gt;
        ///    &lt;div class=&quot;text labelDisplay&quot;&gt;&lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayLabelDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayLabelDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var labels = document.getElementById(&quot;labels&quot;);
        ///
        ///var displaySettings = &quot;{DisplaySetting}&quot;;
        ///var displayRotationSeconds = {DisplayRotationSeconds};
        ///var displayRotationIndex = 0;
        ///
        ///function addLabelDisplay(type, format)
        ///{
        ///    let labelDisplayTemplate = document.getElementById(&quot;labeldisplay&quot;);
        ///    const labelDisplay = labelDisplayTemplate.content.cloneNode(true);
        ///    const labelText = labelDisplay.querySelector(&quot;.text&quot;);
        ///    labelText.id = type;
        ///    labelText.innerHTML = format;
        ///    labelText.style. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayLabelDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayLabelDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $userdisplayname - $labelamount.
        /// </summary>
        public static string OverlayLabelUsernameAmountDefaultFormat {
            get {
                return ResourceManager.GetString("OverlayLabelUsernameAmountDefaultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $userdisplayname.
        /// </summary>
        public static string OverlayLabelUsernameDefaultFormat {
            get {
                return ResourceManager.GetString("OverlayLabelUsernameDefaultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///}
        ///
        ///.item {
        ///    width: {Width};
        ///    height: {Height};
        ///    background-color: {BackgroundColor};
        ///    border-style: solid;
        ///    border-width: 5px;
        ///    border-color: {BorderColor};
        ///    overflow: hidden;
        ///}
        ///
        ///.itemContents {
        ///    display: flex;
        ///    flex-direction: column;
        ///    height: 100%;
        ///    justify-content: space-between;
        ///}
        ///
        ///.topLeft {
        ///    margin-top: 10px;
        ///    margin-left: 10px;
        ///}
        ///
        ///.bottomRight {
        ///    align-self: end;
        ///    margin-bottom: 10px;
        ///    margin-right: 10px;
        ///}
        ///
        ///.heade [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayLeaderboardDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayLeaderboardDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;item&quot;&gt;
        ///    &lt;div class=&quot;item&quot;&gt;
        ///        &lt;div class=&quot;itemContents&quot;&gt;
        ///            &lt;span class=&quot;header topLeft&quot;&gt;&lt;/span&gt;
        ///            &lt;span class=&quot;text bottomRight&quot;&gt;&lt;/span&gt;
        ///        &lt;/div&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayLeaderboardDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayLeaderboardDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const list = document.getElementById(&quot;list&quot;);
        ///
        ///const itemTemplate = document.querySelector(&quot;#item&quot;);
        ///
        ///var items = [];
        ///
        ///function clear(data)
        ///{
        ///    items = [];
        ///    while (list.childElementCount &gt; 0)
        ///    {
        ///        list.removeChild(list.lastElementChild);
        ///    }
        ///}
        ///
        ///function update(data)
        ///{
        ///    for (let i = 0; i &lt; items.length &amp;&amp; i &lt; data.Items.length; i++)
        ///    {
        ///        if (items[i] !== data.Items[i].User.ID)
        ///        {
        ///            let oldItem = list.children[i];
        ///            let newItem = cre [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayLeaderboardDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayLeaderboardDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;Neuroriot Bot - Overlay&lt;/title&gt;
        ///
        ///    &lt;script&gt;
        ///        var connection;
        ///        var isDebug = false;
        ///
        ///        function openWebsocketConnection(path) {
        ///            openWebsocketConnectionWithAddressPort(window.location.hostname, window.location.port, path);
        ///        }
        ///
        ///        function openWebsocketCo [rest of string was truncated]&quot;;.
        ///        function openWebsocketConnectionWithAddressPort(address, port, path) {
        ///            try {
        ///               [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayMainHTML {
            get {
                return ResourceManager.GetString("OverlayMainHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to async function showEmote(data)
        ///{
        ///    for (let e = 0; e &lt; data.Amount; e++)
        ///    {
        ///        for (let i = 0; i &lt; perEmoteShown; i++)
        ///        {
        ///            var emote = createEmote(data.Emote);
        ///
        ///            window[data.AnimationType](emote);
        ///            
        ///            setTimeout(() =&gt;
        ///            {
        ///                main.removeChild(emote);
        ///            }, duration);
        ///            
        ///            if (data.IncludeDelay)
        ///            {
        ///                await sleep(200);
        ///            }
        ///        }
        ///    }
        ///}.
        /// </summary>
        public static string OverlayPersistentEmoteEffectDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayPersistentEmoteEffectDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const displayFormat = &quot;{DisplayFormat}&quot;;
        ///
        ///var totalSeconds = {CurrentAmount};
        ///var additionalTime = 0;
        ///
        ///const main = document.getElementById(&quot;maindiv&quot;);
        ///
        ///function timerLoop()
        ///{
        ///    if (additionalTime != 0)
        ///    {
        ///        totalSeconds += additionalTime;
        ///        additionalTime = 0;
        ///
        ///        totalSeconds = Math.max(totalSeconds, 0);
        ///        performAnimation(&quot;{TimerAdjustedAnimationFramework}&quot;, &quot;{TimerAdjustedAnimationName}&quot;, main).then((result) =&gt;
        ///        {
        ///            
        ///        });
        ///    }
        ///
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayPersistentTimerDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayPersistentTimerDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .maindiv {
        ///    position: absolute;
        ///    width: 100%;
        ///    max-width: 100%;
        ///    min-width: 100%;
        ///    height: 100%;
        ///    max-height: 100%;
        ///    min-height: 100%;
        ///    margin: 0px;
        ///    z-index: {Layer};
        ///}
        ///
        ///.contentdiv {
        ///    position: absolute;
        ///    margin: 0px;
        ///    left: {XPosition}{PositionTypeUnit};
        ///    top: {YPosition}{PositionTypeUnit};
        ///    transform: translate({XTranslation}%, {YTranslation}%);
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayPositionedItemDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayPositionedItemDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;maindiv&quot; class=&quot;maindiv&quot;&gt;
        ///&lt;div id=&quot;contentdiv&quot; class=&quot;contentdiv&quot;&gt;
        ///
        ///{InnerHTML}
        ///
        ///&lt;/div&gt;
        ///&lt;/div&gt;.
        /// </summary>
        public static string OverlayPositionedItemDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayPositionedItemDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;audio id=&quot;audio&quot; allow=&quot;autoplay; encrypted-media&quot; onloadstart=&quot;this.volume={Volume}&quot; autoplay&gt;
        ///    &lt;source src=&quot;{URLPath}&quot; type=&quot;{SourceType}&quot;&gt;
        ///&lt;/audio&gt;.
        /// </summary>
        public static string OverlaySoundDefaultHTML {
            get {
                return ResourceManager.GetString("OverlaySoundDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const main = document.getElementById(&quot;maindiv&quot;);
        ///const sound = document.getElementById(&apos;audio&apos;);
        ///
        ///function removeSelf()
        ///{
        ///    sendParentMessage({ Type: &quot;Remove&quot;, ID: &quot;{ID}&quot; });
        ///}
        ///
        ///function remove(data)
        ///{
        ///    removeSelf();
        ///}
        ///
        ///sound.addEventListener(&apos;ended&apos;, () =&gt;
        ///{
        ///    sendParentMessage({ Type: &quot;SoundFinished&quot;, ID: &quot;{ID}&quot; });
        ///    removeSelf();
        ///});.
        /// </summary>
        public static string OverlaySoundDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlaySoundDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .mainContainer {
        ///  display: flex;
        ///  border-style: solid;
        ///  border-width: 5px;
        ///  border-color: {BorderColor};
        ///  background-color: {BackgroundColor};
        ///  width: {Width};
        ///  height: {Height};
        ///}
        ///
        ///.image {
        ///  width: 100%;
        ///  height: auto;
        ///  display: block;
        ///  margin: 0;
        ///}
        ///
        ///.healthBarDamage {
        ///  background-color: {DamageColor};
        ///  height: 100%;
        ///}
        ///
        ///.healthRemainingBar {
        ///  background-color: {HealthColor};
        ///  height: 100%;
        ///}
        ///
        ///.imageContainer {
        ///  flex: 1;
        ///  display: flex;
        ///  align-items: center;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayStreamBossDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayStreamBossDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div class=&quot;mainContainer&quot;&gt;
        ///  &lt;div class=&quot;imageContainer&quot;&gt;
        ///    &lt;img id=&quot;bossImage&quot; class=&quot;image&quot;&gt;
        ///  &lt;/div&gt;
        ///  
        ///  &lt;div class=&quot;infoContainer&quot;&gt;
        ///    &lt;div class=&quot;infoContainerVerticalSplit&quot;&gt;
        ///      &lt;div class=&quot;verticalFlexAuto&quot;&gt;
        ///        &lt;div style=&quot;display: flex;&quot;&gt;
        ///          &lt;span id=&quot;bossName&quot; class=&quot;text flexAuto&quot;&gt;&lt;/span&gt;
        ///
        ///          &lt;span class=&quot;text&quot;&gt;
        ///            &lt;span id=&quot;bossHealth&quot;&gt;&lt;/span&gt;
        ///            &lt;span&gt; / &lt;/span&gt;
        ///            &lt;span id=&quot;bossMaxHealth&quot;&gt;&lt;/span&gt;
        ///          &lt;/span&gt;
        ///        &lt;/di [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayStreamBossDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayStreamBossDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const main = document.getElementById(&quot;maindiv&quot;);
        ///
        ///const bossImage = document.getElementById(&quot;bossImage&quot;);
        ///const bossName = document.getElementById(&quot;bossName&quot;);
        ///const bossHealth = document.getElementById(&quot;bossHealth&quot;);
        ///const bossMaxHealth = document.getElementById(&quot;bossMaxHealth&quot;);
        ///const bossHealthBarRemaining = document.getElementById(&quot;bossHealthBarRemaining&quot;);
        ///
        ///function damage(data)
        ///{
        ///    bossHealth.innerHTML = data.BossHealth;
        ///    adjustProgress(data);
        ///    performAnimation(&quot;{DamageAnimationFra [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayStreamBossDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayStreamBossDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .text {
        ///    font-size: {FontSize}px;
        ///    color: {FontColor};
        ///    font-family: &apos;{FontFamily}&apos;;
        ///    font-weight: {FontWeight};
        ///    text-decoration: {TextDecoration};
        ///    font-style: {FontStyle};
        ///    text-align: {TextAlignment};
        ///    text-shadow: {ShadowColor};
        ///}.
        /// </summary>
        public static string OverlayTextDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayTextDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p id=&quot;text&quot; class=&quot;text&quot;&gt;
        ///    {Text}
        ///&lt;/p&gt;.
        /// </summary>
        public static string OverlayTextDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTextDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const text = document.getElementById(&quot;text&quot;);
        ///
        ///function update(data)
        ///{
        ///    text.textContent = data.Text;
        ///}
        ///
        ///sendParentMessage({ Type: &quot;WidgetLoaded&quot;, ID: &quot;{ID}&quot; });.
        /// </summary>
        public static string OverlayTextWidgetDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayTextWidgetDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to setTimeout(function () {
        ///    {PostTimeout}
        ///}, {MillisecondTiming});.
        /// </summary>
        public static string OverlayTimeoutWrapperJavascript {
            get {
                return ResourceManager.GetString("OverlayTimeoutWrapperJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p id=&quot;text&quot; class=&quot;text&quot;&gt;
        ///    {Text}
        ///&lt;/p&gt;.
        /// </summary>
        public static string OverlayTimerDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTimerDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const displayFormat = &quot;{DisplayFormat}&quot;;
        ///
        ///var totalSeconds = 0;
        ///var endingSeconds = 0;
        ///
        ///function timerLoop()
        ///{
        ///    let text = displayFormat;
        ///
        ///    let seconds = totalSeconds % 60;
        ///    if (seconds &lt; 10) { seconds = &quot;0&quot; + seconds }
        ///    text = text.replace(&quot;SS&quot;, totalSeconds);
        ///    text = text.replace(&quot;ss&quot;, seconds);
        ///
        ///    let totalMinutes = Math.floor(totalSeconds / 60);
        ///    let minutes = totalMinutes % 60;
        ///    if (minutes &lt; 10) { minutes = &quot;0&quot; + minutes }
        ///    text = text.replace(&quot;MM&quot;, totalMinu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayTimerDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayTimerDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .clip {
        ///    width: {ClipWidth};
        ///    height: {ClipHeight};
        ///    border: none;
        ///    margin: 0;
        ///    padding: 0;
        ///}.
        /// </summary>
        public static string OverlayTwitchClipEmbedDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayTwitchClipEmbedDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;iframe id=&quot;clip&quot; class=&quot;clip&quot;&gt;&lt;/iframe&gt;.
        /// </summary>
        public static string OverlayTwitchClipEmbedDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTwitchClipEmbedDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var clip = document.getElementById(&quot;clip&quot;);
        ///clip.setAttribute(&quot;src&quot;, &quot;https://clips.twitch.tv/embed?parent=&quot; + window.location.hostname + &quot;&amp;autoplay=true&amp;muted=false&amp;clip={ClipID}&quot;);.
        /// </summary>
        public static string OverlayTwitchClipEmbedDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayTwitchClipEmbedDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .video {
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayTwitchClipVideoDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayTwitchClipVideoDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;video id=&quot;video&quot; class=&quot;video&quot; onloadstart=&quot;this.volume={Volume}&quot; allow=&quot;autoplay; encrypted-media&quot; autoplay&gt;
        ///    &lt;source src=&quot;{ClipDirectLink}&quot; /&gt;
        ///&lt;/video&gt;.
        /// </summary>
        public static string OverlayTwitchClipVideoDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTwitchClipVideoDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to if (duration == 0.0)
        ///{
        ///    var video = document.getElementById(&quot;video&quot;);
        ///    video.addEventListener(&quot;ended&quot;, (event) =&gt;
        ///    {
        ///        performAnimation(&quot;{ExitAnimationFramework}&quot;, &quot;{ExitAnimationName}&quot;, main).then((result) =&gt;
        ///        {
        ///            removeSelf();
        ///        });
        ///    });
        ///}.
        /// </summary>
        public static string OverlayVideoActionDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayVideoActionDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .video {
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayVideoDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayVideoDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;video id=&quot;video&quot; class=&quot;video&quot; onloadstart=&quot;this.volume={Volume}&quot; allow=&quot;autoplay; encrypted-media&quot; autoplay {Loop}&gt;
        ///    &lt;source id=&quot;videosource&quot; src=&quot;{URLPath}&quot; /&gt;
        ///&lt;/video&gt;.
        /// </summary>
        public static string OverlayVideoDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayVideoDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const video = document.getElementById(&quot;video&quot;);
        ///const videosource = document.getElementById(&quot;videosource&quot;);
        ///
        ///var lastFilePathID = &quot;{FilePathID}&quot;;
        ///
        ///function update(data)
        ///{
        ///    if (lastFilePathID !== data.FilePathID)
        ///    {
        ///        lastFilePathID = data.FilePathID;
        ///        
        ///        video.pause();
        ///        videosource.setAttribute(&quot;src&quot;, data.URLPath);
        ///        video.load();
        ///        video.play();
        ///    }
        ///}
        ///
        ///sendParentMessage({ Type: &quot;WidgetLoaded&quot;, ID: &quot;{ID}&quot; });.
        /// </summary>
        public static string OverlayVideoWidgetDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayVideoWidgetDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;iframe frameborder=&quot;0&quot; width=&quot;{Width}&quot; height=&quot;{Height}&quot; src=&quot;{URL}&quot; /&gt;.
        /// </summary>
        public static string OverlayWebPageDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayWebPageDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string OverlayWheelDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayWheelDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div style=&quot;display: flex&quot;&gt;
        ///    &lt;div&gt;
        ///        &lt;canvas id=&quot;wheelCanvas&quot; width=&quot;{Size}&quot; height=&quot;{Size}&quot; /&gt;
        ///    &lt;/div&gt;
        ///    &lt;div&gt;
        ///        &lt;canvas id=&quot;arrowCanvas&quot; width=&quot;50&quot; height=&quot;{Size}&quot; /&gt;
        ///    &lt;/div&gt;
        ///&lt;/div&gt;.
        /// </summary>
        public static string OverlayWheelDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayWheelDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const main = document.getElementById(&quot;maindiv&quot;);
        ///const wheelCanvas = document.getElementById(&quot;wheelCanvas&quot;);
        ///const arrowCanvas = document.getElementById(&quot;arrowCanvas&quot;);
        ///
        ///hideWheel();
        ///
        ///const startingSpeed = 10;
        ///const spinsPerSpeed = 100;
        ///const totalIntervals = 15;
        ///const intervalDivider = 1.5;
        ///const soundInterval = 75;
        ///
        ///const xPosition = {Size} / 2;
        ///const yPosition = {Size} / 2;
        ///const radius = {Size} / 2;
        ///const names = [{OutcomeNames}];
        ///const colors = [{OutcomeColors}];
        ///const wheelClickSoundU [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayWheelDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayWheelDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .youtubeVideo {
        ///
        ///}.
        /// </summary>
        public static string OverlayYouTubeDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayYouTubeDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;youtube-player&quot; class=&quot;youtubeVideo&quot; /&gt;.
        /// </summary>
        public static string OverlayYouTubeDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayYouTubeDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function onYouTubeIframeAPIReady() {
        ///    var youtubeVideoPlayer = new YT.Player(&quot;youtube-player&quot;, {
        ///        height: {HeightNumber},
        ///        width: {WidthNumber},
        ///        videoId: &apos;{VideoID}&apos;,
        ///        playerVars: { &apos;controls&apos;: 0, &apos;modestbranding&apos;: 1, &apos;start&apos;: {StartTime} },
        ///        events: {
        ///            &apos;onReady&apos;: function () {
        ///                youtubeVideoPlayer.setVolume({Volume});
        ///                youtubeVideoPlayer.setLoop(false);
        ///                youtubeVideoPlayer.frameBorder = 0;
        ///              [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayYouTubeDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayYouTubeDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var youtubeVideoPlayer;
        ///var lastVideoID = &apos;{VideoID}&apos;;
        ///
        ///function onYouTubeIframeAPIReady() {
        ///    youtubeVideoPlayer = new YT.Player(&quot;youtube-player&quot;, {
        ///        height: {HeightNumber},
        ///        width: {WidthNumber},
        ///        videoId: &apos;{VideoID}&apos;,
        ///        playerVars: { &apos;controls&apos;: 0, &apos;modestbranding&apos;: 1, &apos;start&apos;: {StartTime} },
        ///        events: {
        ///            &apos;onReady&apos;: function () {
        ///                youtubeVideoPlayer.setVolume({Volume});
        ///                youtubeVideoPlayer.setLoop(false);
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayYouTubeWidgetDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayYouTubeWidgetDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @charset &quot;UTF-8&quot;;
        ///.vjs-modal-dialog .vjs-modal-dialog-content, .video-js .vjs-modal-dialog, .vjs-button &gt; .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {
        ///  position: absolute;
        ///  top: 0;
        ///  left: 0;
        ///  width: 100%;
        ///  height: 100%;
        ///}
        ///
        ///.vjs-button &gt; .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {
        ///  text-align: center;
        ///}
        ///
        ///@font-face {
        ///  font-family: VideoJS;
        ///  src: url(data:application/font-woff;charset=utf-8;ba [rest of string was truncated]&quot;;.
        /// </summary>
        public static string videoCSS {
            get {
                return ResourceManager.GetString("videoCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @license
        /// * Video.js 7.19.2 &lt;http://videojs.com/&gt;
        /// * Copyright Brightcove, Inc. &lt;https://www.brightcove.com/&gt;
        /// * Available under Apache License Version 2.0
        /// * &lt;https://github.com/videojs/video.js/blob/main/LICENSE&gt;
        /// *
        /// * Includes vtt.js &lt;https://github.com/mozilla/vtt.js&gt;
        /// * Available under Apache License Version 2.0
        /// * &lt;https://github.com/mozilla/vtt.js/blob/main/LICENSE&gt;
        /// */
        ///!function(e,t){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=t():&quot;function&quot;==typeof define&amp;&amp; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string videoJS {
            get {
                return ResourceManager.GetString("videoJS", resourceCulture);
            }
        }
    }
}
